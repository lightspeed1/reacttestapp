{"version":3,"sources":["index.tsx"],"names":["theme","createMuiTheme","breakpoints","values","xs","sm","md","lg","xl","useStyles","makeStyles","awesome","color","useStyles3","drawerPaper","down","width","height","up","useStylesCloseButton","yo","display","SimpleMenu","props","React","useState","anchorEl","setAnchorEl","handleClose","className","aria-controls","aria-haspopup","onClick","event","currentTarget","src","id","keepMounted","open","Boolean","onClose","CustomCheckbox","me","this","classes","position","top","left","root","toggleDrawer","CustomCheckboxA","size","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","drawerType","drawerLocation","closeButtonClass","paper","state","drawerOpen","variant","anchor","startIcon","Counter","count","allText","messageText","style","inputRef","createRef","flexDirection","justifyContent","alignItems","flexWrap","alt","padding","name","onChange","e","onChangeValue","value","ref","type","placeholder","myFunction","console","log","setState","target","res","empty","x","length","concat","fontFamily","bgcolor","boxShadow","borderRadius","current","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b609e450.chunk.js","sourcesContent":["import React, {Component, CSSProperties, useState, useLayoutEffect} from 'react';\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./styles.css\"\r\nimport { start } from 'repl';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Box, Input, SwipeableDrawer, Tab, IconButton, Avatar } from '@material-ui/core';\r\nimport HomeRoundedIcon from '@material-ui/icons/HomeRounded';\r\nimport PeopleAltRoundedIcon from '@material-ui/icons/PeopleAltRounded';\r\nimport SettingsApplicationsRoundedIcon from '@material-ui/icons/SettingsApplicationsRounded';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport DehazeRoundedIcon from '@material-ui/icons/DehazeRounded';\r\nimport { positions } from '@material-ui/system';\r\nimport { createMuiTheme, ThemeProvider, makeStyles, createStyles } from '@material-ui/core/styles';\r\nimport {BreakpointOverrides} from \"@material-ui/core/styles/createBreakpoints\"\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport purple from '@material-ui/core/colors/purple';\r\nimport green from '@material-ui/core/colors/green';\r\nimport { orange } from '@material-ui/core/colors';\r\ndeclare module \"@material-ui/core/styles/createBreakpoints\" {\r\n    interface BreakpointOverrides {\r\n      xs: true; // removes the `xs` breakpoint\r\n      sm: true;\r\n      md: true;\r\n      lg: true;\r\n      xl: true;\r\n      tablet: false; // adds the `tablet` breakpoint\r\n      laptop: false;\r\n      desktop: false;\r\n    }\r\n  }\r\nconst theme = createMuiTheme({\r\n    breakpoints: {\r\n      values: {\r\n        xs:300,\r\n        sm: 640,\r\n        md: 1024,\r\n        lg: 1280,\r\n        xl: 1000\r\n      },\r\n    },\r\n  });\r\n\r\nconst useStyles = makeStyles(\r\n    {awesome: {\r\n          color: \"#FFFFFF\"\r\n      }\r\n    }\r\n  );\r\n  const useStyles2 = makeStyles(\r\n    {awesome: {\r\n        color : \"#000000\"\r\n      }\r\n    }\r\n  );\r\n  const useStyles3 = makeStyles(\r\n    {drawerPaper: {\r\n      [theme.breakpoints.down(\"md\")]:\r\n      {\r\n        width: \"100%\",\r\n        height: 300\r\n      },\r\n      [theme.breakpoints.up(\"md\")]:\r\n      {\r\n        width: 200,\r\n        height: \"100%\"\r\n      }\r\n      }\r\n    }\r\n  );\r\n  const useStylesCloseButton = makeStyles(\r\n    {\r\n      yo:\r\n      {\r\n        [theme.breakpoints.up(\"md\")]:\r\n        {\r\n          display:\"none\"\r\n        }\r\n      }\r\n    }\r\n  );\r\n  function SimpleMenu(props:any) {\r\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n  \r\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n      setAnchorEl(event.currentTarget);\r\n    };\r\n  \r\n    const handleClose = () => {\r\n      setAnchorEl(null);\r\n    };\r\n  \r\n    return (\r\n      <>\r\n        <Button className = {props.className} aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\r\n          <img src = \"smiley.jpg\" className = \"avatarThingy\"></img>\r\n        </Button>\r\n        <Menu\r\n          id=\"simple-menu\"\r\n          anchorEl={anchorEl}\r\n          keepMounted\r\n          open={Boolean(anchorEl)}\r\n          onClose={handleClose}\r\n        >\r\n          <MenuItem onClick={handleClose}>Profile</MenuItem>\r\n          <MenuItem onClick={handleClose}>My account</MenuItem>\r\n          <MenuItem onClick={handleClose}>Logout</MenuItem>\r\n        </Menu>\r\n      </>\r\n    );\r\n  }\r\n  \r\n  function CustomCheckbox(props:any) {\r\n    const me = props.this;\r\n    const classes = useStyles();\r\n    return (\r\n        <>\r\n        <Box position = \"fixed\" top = \"0\" left = \"0\">\r\n            <IconButton classes={{root: classes.awesome}} onClick = {() => me.toggleDrawer()}>\r\n                <DehazeRoundedIcon/>\r\n            </IconButton>\r\n        </Box>\r\n        </>\r\n    );\r\n  }\r\n  function CustomCheckboxA(props:any) {\r\n    const [width, height] = useWindowSize();\r\n    const me = props.this;\r\n    if(width < 1024)\r\n    {\r\n      me.drawerType = \"persistent\";\r\n      me.drawerLocation = \"top\";\r\n    }\r\n    else\r\n    {\r\n      me.drawerType = \"permanent\";\r\n      me.drawerLocation = \"left\";\r\n    }\r\n    const classes = useStyles3();\r\n    const closeButtonClass = useStylesCloseButton();\r\n    return (\r\n        <>\r\n        <Drawer classes = {{paper:classes.drawerPaper}} open={me.state.drawerOpen} variant={me.drawerType} anchor={me.drawerLocation}>\r\n            <IconButton classes = {{root:closeButtonClass.yo}} onClick = {()=> me.toggleDrawer()}> \r\n                <ArrowBackIosIcon/> \r\n            </IconButton>\r\n            <Button startIcon={<HomeRoundedIcon />}  size = \"large\" variant=\"contained\" color=\"primary\" className = \"unstyled-button\">HOME</Button>\r\n            <Button startIcon={<PeopleAltRoundedIcon />}  size = \"large\" variant=\"contained\" color=\"primary\" className = \"cool-button\">STUFF</Button>\r\n            <Button startIcon={<SettingsApplicationsRoundedIcon />}  size = \"large\" variant=\"contained\" color=\"primary\" className = \"cool-button\">HI</Button>\r\n            <Button size = \"large\" variant=\"contained\" color=\"primary\" className = \"cool-button\">ME</Button>\r\n        </Drawer>\r\n        </>\r\n    );\r\n  }\r\n  function useWindowSize() {\r\n    const [size, setSize] = useState([0, 0]);\r\n    useLayoutEffect(() => {\r\n      function updateSize() {\r\n        setSize([window.innerWidth, window.innerHeight]);\r\n      }\r\n      window.addEventListener('resize', updateSize);\r\n      updateSize();\r\n      return () => window.removeEventListener('resize', updateSize);\r\n    }, []);\r\n    return size;\r\n  }\r\n\r\nclass Counter extends Component\r\n{\r\n    state : {count:number; allText :JSX.Element[]; messageText:string; drawerOpen: boolean}= \r\n    {\r\n        count : 0,\r\n        allText  : [],\r\n        messageText : \"\",\r\n        drawerOpen : false\r\n    }\r\n    drawerType = \"persistent\"\r\n    drawerLocation = \"left\"\r\n    style = () =>\r\n    {\r\n        return 1;\r\n    }\r\n    inputRef = React.createRef<HTMLInputElement>();\r\n    render()\r\n    {\r\n      var {count} = this.state;\r\n      return (\r\n      <>\r\n        <Box className = \"topbar\" display=\"flex\" flexDirection=\"row\" justifyContent=\"flex-end\" alignItems=\"center\"  flexWrap=\"wrap\">\r\n            <img src = \"smiley.jpg\"  className = \"centered\" alt = \"smile\"></img>\r\n            <SimpleMenu></SimpleMenu>\r\n        </Box>\r\n        <CustomCheckbox this = {this}/>\r\n        <CustomCheckboxA this = {this}/>\r\n\r\n          <Box padding = \"5px\" className = \"input chatContainer\">\r\n            <>\r\n              {this.state.allText}              \r\n            </>\r\n          </Box>\r\n          <Box className = \"hi hi2\"   display=\"flex\" flexDirection=\"row\" flexWrap=\"nowrap\" justifyContent=\"flex-start\" alignItems=\"center\" >\r\n            <input className = \"myInput\" name = \"messageText\" onChange = {(e) => this.onChangeValue(e)} value = {this.state.messageText} ref = {this.inputRef} type=\"text\" placeholder = \"Your Message here\"></input>\r\n            <Button variant=\"contained\" color = \"primary\" className = \"sendButton\" onClick = {()=>this.myFunction()}>SEND</Button>\r\n          </Box>\r\n      </>);\r\n    }\r\n    toggleDrawer()\r\n    {\r\n        console.log(window.innerWidth);\r\n        console.log(\"wow\");\r\n        this.setState({drawerOpen:!this.state.drawerOpen});\r\n    }\r\n    onChangeValue(e :any)\r\n    {\r\n        this.setState({\r\n            [e.target.name] : e.target.value\r\n        });\r\n    }\r\n    myFunction()\r\n    {\r\n        let res :string = this.state.messageText;\r\n        let empty:boolean = true;\r\n        for(let x = 0; x < res.length; x++)\r\n        {\r\n\t        if (res[x] !== \" \")\r\n            {\r\n                empty = false;\r\n                break;\r\n            }\r\n        }\r\n        if (empty === false && res !== \"\")\r\n        {\r\n            this.setState({count: (this.state.count)+1});\r\n        this.setState({allText : this.state.allText.concat(<Box fontFamily= \"Roboto\" bgcolor = \"primary.main\" padding = \"10px\" boxShadow = {2} borderRadius = {16} color=\"secondary.main\" className = \"chatBubble\">{\"\\n\"+this.inputRef.current?.value}</Box>)})\r\n        }\r\n        this.setState({messageText:\"\"});\r\n    }\r\n}\r\nReactDOM.render(<Counter/>, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}